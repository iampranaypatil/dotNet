https://code-maze.com/state-management-in-asp-net-core-mvc/

HTTP is a stateless protocol. So HTTP requests are independent messages that don’t retain user values or app states. 
We need to take additional steps to manage state between the requests. 



Cookies
Cookies store data in the user’s browser. Browsers send cookies with every request and hence their size should be kept to a minimum.
Ideally, we should only store an identifier in the cookie and we should store the corresponding data using the application. 
Most browsers restrict cookie size to 4096 bytes and only a limited number of cookies are available for each domain.

Users can easily tamper with or delete a cookie. Cookies can also expire on their own. 
Hence we should not use them to store sensitive information and their values should not be blindly trusted or used without proper validation.


We often use cookies to personalize the content for a known user especially when we just identify a user without authentication. 
We can use the cookie to store some basic information like the user’s name. 
Then we can use the cookie to access the user’s personalized settings, such as their preferred color theme.



Session State
Session state is an ASP.NET Core mechanism to store user data while the user browses the application. 
It uses a store maintained by the application to persist data across requests from a client. 
We should store critical application data in the user’s database and we should cache it in a session only as a performance optimization if required.

ASP.NET Core maintains the session state by providing a cookie to the client that contains a session ID. The browser sends this cookie to the application with each request. The application uses the session ID to fetch the session data.

While working with the Session state, we should keep the following things in mind:

.A Session cookie is specific to the browser session
.When a browser session ends, it deletes the session cookie
.If the application receives a cookie for an expired session, it creates a new session that uses the same session cookie
.An Application doesn’t retain empty sessions
.The application retains a session for a limited time after the last request. 
 The app either sets the session timeout or uses the default value of 20 minutes
.Session state is ideal for storing user data that are specific to a particular session but doesn’t require permanent storage across sessions
.An application deletes the data stored in session either when we call the ISession.
 Clear implementation or when the session expires
.There’s no default mechanism to inform the application that a client has closed the browser or deleted the session cookie or it is expired




ViewData and ViewBag are objects that can be used to pass data from the Controller to the View in an ASP.NET Core MVC application.


ViewData

ViewData is a dictionary object that you put data into, which then becomes available to the view. ViewData is a derivative of the ViewDataDictionary class, so you can access by the familiar "key/value" syntax.



ViewBag

The ViewBag object is a wrapper around the ViewData object that allows you to create dynamic properties for the ViewBag.

TempData
s meant to be a very short-lived instance, and you should only use it during the current and the subsequent requests only! Since TempData works this way, you need to know for sure what the next request will be, and redirecting to another view is the only time you can guarantee this. Therefore, the only scenario where using TempData will reliably work is when you are redirecting. This is because a redirect kills the current request (and sends HTTP status code 302 Object Moved to the client), then creates a new request on the server to serve the redirected view. Looking back at the previous HomeController code sample means that the TempData object could yield results differently than expected because the next request origin can't be guaranteed. For example, the next request can originate from a completely different machine and browser instance.


TempData is a type of object that is used to store temporary data in an ASP.NET MVC application. It is a property of the ControllerBase class, which is the base class for all controllers in an ASP.NET MVC application.

The TempData property is used to pass data from one action method to another, and it is particularly useful for passing data between a controller action and a view. It is implemented using the SessionStateTempDataProvider class, which stores the data in the session state.

To use TempData, you can set its value in an action method and then retrieve it in a subsequent action method or view. For example, you might set a message in an action method that is displayed to the user in a view. When the view is rendered, the message is removed from TempData.

